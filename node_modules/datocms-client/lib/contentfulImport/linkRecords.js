"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = require('humps'),
    camelize = _require.camelize;

function uploadData(id) {
  if (!id) {
    return null;
  }

  return {
    uploadId: id,
    alt: null,
    title: null,
    customData: {}
  };
}

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref) {
    var datoClient, fieldsMapping, contentfulData, contentfulRecordMap, uploadsMapping, spinner, entries, progress, _ret;

    return regeneratorRuntime.wrap(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            datoClient = _ref.datoClient, fieldsMapping = _ref.fieldsMapping, contentfulData = _ref.contentfulData, contentfulRecordMap = _ref.contentfulRecordMap, uploadsMapping = _ref.uploadsMapping;
            spinner = (0, _ora["default"])('').start();
            entries = contentfulData.entries;
            progress = new _progress["default"](entries.length, 'Create links');
            _context3.prev = 4;
            return _context3.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var datoValueForFieldType, recordsToPublish, _iterator, _step, entry, datoItemId, datoFields, datoNewValue, _loop, _i, _Object$entries, _ret2;

              return regeneratorRuntime.wrap(function _callee$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      spinner.text = progress.tick();

                      datoValueForFieldType = function datoValueForFieldType(value, field) {
                        if (['file'].includes(field.fieldType)) {
                          return value && value.sys ? uploadData(uploadsMapping[value.sys.id]) : null;
                        }

                        if (['link'].includes(field.fieldType)) {
                          return value && value.sys ? contentfulRecordMap[value.sys.id] : null;
                        }

                        if (['links'].includes(field.fieldType)) {
                          return value.map(function (link) {
                            return link && link.sys ? contentfulRecordMap[link.sys.id] : null;
                          }).filter(function (v) {
                            return !!v;
                          });
                        }

                        if (['gallery'].includes(field.fieldType)) {
                          return value.map(function (link) {
                            return link && link.sys ? uploadData(uploadsMapping[link.sys.id]) : null;
                          }).filter(function (v) {
                            return !!v;
                          });
                        }

                        return value;
                      };

                      recordsToPublish = [];
                      _iterator = _createForOfIteratorHelper(entries);
                      _context2.prev = 4;

                      _iterator.s();

                    case 6:
                      if ((_step = _iterator.n()).done) {
                        _context2.next = 26;
                        break;
                      }

                      entry = _step.value;
                      datoItemId = contentfulRecordMap[entry.sys.id];
                      datoFields = fieldsMapping[entry.sys.contentType.sys.id];
                      datoNewValue = void 0;

                      if (datoFields) {
                        _context2.next = 13;
                        break;
                      }

                      return _context2.abrupt("continue", 24);

                    case 13:
                      _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                        var _Object$entries$_i, id, contentfulItem, _datoFields$find, datoField, recordAttributes;

                        return regeneratorRuntime.wrap(function _loop$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), id = _Object$entries$_i[0], contentfulItem = _Object$entries$_i[1];
                                _datoFields$find = datoFields.find(function (f) {
                                  return f.contentfulFieldId === id;
                                }), datoField = _datoFields$find.datoField;

                                if (['file', 'gallery', 'link', 'links'].includes(datoField.fieldType)) {
                                  _context.next = 4;
                                  break;
                                }

                                return _context.abrupt("return", "continue");

                              case 4:
                                if (datoField.localized) {
                                  datoNewValue = Object.entries(contentfulItem).reduce(function (innerAcc, _ref3) {
                                    var _ref4 = _slicedToArray(_ref3, 2),
                                        locale = _ref4[0],
                                        innerValue = _ref4[1];

                                    var value = datoValueForFieldType(innerValue, datoField);
                                    return value ? _objectSpread(_objectSpread({}, innerAcc), {}, _defineProperty({}, locale, value)) : _objectSpread({}, innerAcc);
                                  }, {});
                                } else {
                                  datoNewValue = datoValueForFieldType(contentfulItem[contentfulData.defaultLocale], datoField);
                                }

                                recordAttributes = _defineProperty({}, camelize(datoField.apiKey), datoNewValue);
                                _context.next = 8;
                                return datoClient.items.update(datoItemId, recordAttributes);

                              case 8:
                                if (entry.sys.publishedVersion) {
                                  recordsToPublish.push(datoItemId);
                                }

                              case 9:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _loop);
                      });
                      _i = 0, _Object$entries = Object.entries(entry.fields);

                    case 15:
                      if (!(_i < _Object$entries.length)) {
                        _context2.next = 23;
                        break;
                      }

                      return _context2.delegateYield(_loop(), "t0", 17);

                    case 17:
                      _ret2 = _context2.t0;

                      if (!(_ret2 === "continue")) {
                        _context2.next = 20;
                        break;
                      }

                      return _context2.abrupt("continue", 20);

                    case 20:
                      _i++;
                      _context2.next = 15;
                      break;

                    case 23:
                      spinner.text = progress.tick();

                    case 24:
                      _context2.next = 6;
                      break;

                    case 26:
                      _context2.next = 31;
                      break;

                    case 28:
                      _context2.prev = 28;
                      _context2.t1 = _context2["catch"](4);

                      _iterator.e(_context2.t1);

                    case 31:
                      _context2.prev = 31;

                      _iterator.f();

                      return _context2.finish(31);

                    case 34:
                      spinner.succeed();
                      return _context2.abrupt("return", {
                        v: recordsToPublish
                      });

                    case 36:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee, null, [[4, 28, 31, 34]]);
            })(), "t0", 6);

          case 6:
            _ret = _context3.t0;

            if (!(_typeof(_ret) === "object")) {
              _context3.next = 9;
              break;
            }

            return _context3.abrupt("return", _ret.v);

          case 9:
            _context3.next = 15;
            break;

          case 11:
            _context3.prev = 11;
            _context3.t1 = _context3["catch"](4);
            spinner.fail();
            throw _context3.t1;

          case 15:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee2, null, [[4, 11]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;